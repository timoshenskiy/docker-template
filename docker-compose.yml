version: '3'

services:
  frontend:
    build:
      dockerfile: Dockerfile.prod
      context: ./frontend
    container_name: docker-template-frontend
    # используем serve для использования минифицированной версии на статичном сервере
    command: serve -s build -l 3000
    restart: unless-stopped
    # volumes позволяют применять внесенные изменения к проекту без перезапуска контейнера
    volumes:
      - ./frontend/src:/usr/src/app/src
    networks:
      - docker-template-network

  api:
    build: ./api
    container_name: docker-template-api
    command: npm run start
    restart: unless-stopped
#   environment - перечисление глобальных переменных для сервиса
    environment:
      - PORT=3001
#   MONGO_URL - урл базы данных, всегда имеет вид mongodb://{host}/{port}/{база данных}
      - MONGO_URL=mongodb://docker-template-api-db:27017/api
      - AUTH_API_URL=http://auth:3002/api
    # depends_on - указывает сервисы, которые должны быть запущены перед запуском
    depends_on:
      - api-db
    networks:
      - docker-template-network

  auth:
    build: ./auth
    container_name: docker-template-auth
    command: npm run start
    restart: unless-stopped
    environment:
      - PORT=3002
      - MONGO_URL=mongodb://docker-template-auth-db:27017/api
      - API_URL=http://api:3001/api
    depends_on:
      - auth-db
    networks:
      - docker-template-network

  api-db:
    image: mongo:latest
    container_name: docker-template-api-db
# volumes - дополнительное хранилище вне контейнера для хранения данных и их шаринга между сервисами
    volumes:
      - mongodb_api:/data/db
    networks:
      - docker-template-network

  auth-db:
    image: mongo:latest
    container_name: docker-template-auth-db
    volumes:
      - mongodb_auth:/data/db
    networks:
      - docker-template-network

  nginx:
    image: nginx:stable-alpine
    container_name: docker-template-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf.prod:/etc/nginx/conf.d/nginx.conf
    # необходимо, чтобы сервис фронтенда был доспен раньше сервиса nginx, потому что nginx упадет т.к. не сможет спроксировать запрос на сервис, который ранится
    depends_on:
      - frontend
      - api
      - auth
    networks:
      - docker-template-network

# настройка позволяет использовать этот volume во всех сервисах
volumes:
  mongodb_api:
  mongodb_auth:

networks:
  docker-template-network:
    driver: bridge
